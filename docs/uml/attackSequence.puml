@startuml

actor User
participant "Main" as Main
participant "Game" as Game
participant "Battle" as Battle
participant "BattleLogic" as BattleLogic
participant "PlayerTurn" as PlayerTurn
participant "EnemyTurn" as EnemyTurn
participant "RollDice" as RollDice
participant "AttackAction" as AttackAction
participant "Enemy" as Enemy
participant "Player" as Player
participant "BattleUI" as BattleUI
participant "Character" as Character

User -> Main: Start game
Main -> Game: game.run()
Game -> Battle: currentEvent.run()

Battle -> BattleUI: battleEntry(enemy)

Battle -> Battle: startBattle()
Battle -> BattleLogic: new BattleLogic(player, enemy)
activate BattleLogic
BattleLogic -> BattleLogic: BattleSequence()

loop Until Battle Ends
    BattleLogic -> BattleLogic: handleTurnOrder()

    alt playerTurn is true
        BattleLogic -> PlayerTurn: new PlayerTurn(player, enemy)
        activate PlayerTurn
        PlayerTurn -> PlayerTurn: handleAction()

        PlayerTurn -> PlayerTurn: getCurrAction()
        PlayerTurn -> RollDice: rollDice()

        activate RollDice
        RollDice --> PlayerTurn: return diceValue
        deactivate RollDice

        PlayerTurn -> RollDice: diceOutcome(diceValue)

        activate RollDice
        RollDice --> PlayerTurn: return outcome
        deactivate RollDice

        PlayerTurn -> AttackAction: check if action is attack
        PlayerTurn -> Character: player.attack(enemy)
        Character -> Character: calculateDamage(enemy)
        Character --> Enemy: takeDamage(damage)
        PlayerTurn -> BattleUI: printPlayerAttack(player, enemy, damage)

        PlayerTurn -> BattleLogic: checkBattleEnd(turn)
        deactivate PlayerTurn
    else playerTurn is false
        BattleLogic -> EnemyTurn: new EnemyTurn(player, enemy)
        activate EnemyTurn
        EnemyTurn -> EnemyTurn: handleAction()
        EnemyTurn -> Character: enemy.attack(player)
        Character -> Character: calculateDamage(player)
        Character --> Player: takeDamage(damage)

        EnemyTurn -> BattleUI: printEnemyAttack(enemy, player, damage)

        EnemyTurn -> BattleUI: printCharacterInfo(player)
        EnemyTurn -> BattleUI: printCharacterInfo(enemy)
        EnemyTurn -> BattleLogic: checkBattleEnd(turn)

        deactivate EnemyTurn
    end

    BattleLogic -> BattleLogic: checkBattleEnd()
end
deactivate BattleLogic

Battle -> BattleUI: battleExit(player, enemy)

@enduml

