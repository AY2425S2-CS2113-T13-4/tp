@startuml
hide footbox

actor User
participant "UI" as UI
participant "Parser" as Parser
participant "Battle" as Battle
participant "BattleLogic" as BattleLogic
participant "PlayerTurn" as PlayerTurn
participant "EnemyTurn" as EnemyTurn
participant "RollDice" as RollDice
participant "Player" as Player
participant "BattleUI" as BattleUI
participant "Character" as Character


Battle -> BattleUI: battleEntry(enemy)


loop Until Battle Ends


    alt playerTurn is true
        User -> Parser: enter command
        Parser -> Parser: readInput()
        Parser --> PlayerTurn: return inputString
        PlayerTurn -> PlayerTurn: getAction(inputString)

        PlayerTurn -> RollDice: rollDice()
        RollDice --> PlayerTurn: return diceValue
        PlayerTurn -> RollDice: diceOutcome(diceValue)
        RollDice --> PlayerTurn: return diceOutcome

        PlayerTurn -> Character: setDefending(true)
        PlayerTurn -> Player: setDefenseBonus(diceOutcome)
        PlayerTurn -> BattleLogic: checkBattleEnd(turn)
        deactivate PlayerTurn

    else playerTurn is false
        BattleLogic -> EnemyTurn: new EnemyTurn(player, enemy)
        activate EnemyTurn
        EnemyTurn -> EnemyTurn: handleAction()
        EnemyTurn -> Character: enemy.attack(player)
        Character -> Character: calculateDamage(player)
        Character --> Player: takeDamage(damage)
        EnemyTurn -> BattleUI: printEnemyAttack(enemy, player, damage)

        EnemyTurn -> UI: printCharacterInfo(player)
        EnemyTurn -> UI: printCharacterInfo(enemy)
        EnemyTurn -> BattleLogic: checkBattleEnd(turn)
        deactivate EnemyTurn
    end

    BattleLogic -> BattleLogic: checkBattleEnd()
end
deactivate BattleLogic

Battle -> BattleUI: battleExit(player, enemy)

@enduml

